@using helloserve.com.Adaptors
@using helloserve.com.Models
@inject IBlogServiceAdaptor ServiceAdaptor

@if (blogItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        @foreach (var item in blogItems)
        {
            <div class="container-fluid m-3" style="@ListingStyle(item)">
                <div class="d-inline-flex mt-3" style="background-color:rgba(255,255,255,0.7)">
                    <div class="container-fluid">
                        <NavLink class="nav-link" href="@AsUrl(item.Key)">
                            <h4 class="h-helloserve">@item.Title</h4>
                        </NavLink>
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-md-auto">
                                    <h6>@(item.PublishDate == null ? "Not Published" : item.PublishDate.Value.ToShortDateString())</h6>
                                </div>
                                <div class="col-md-auto">
                                    <AuthorizeView>
                                        <Authorized>
                                            <NavLink href="@AsAdminUrl(item.Key)">
                                                <span class="oi oi-pencil"></span>
                                            </NavLink>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                                <div class="col">
                                    <p>
                                        @item.Description
                                    </p>
                                    <p>
                                        <NavLink href="@AsUrl(item.Key)">
                                            <button class="btn btn-helloserve">Read More...</button>
                                        </NavLink>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="m-3 text-center">
        <button @onclick="Previous" class="btn btn-dark btn-lg page"><span class="oi oi-chevron-left"></span></button>
        <span>Page @PageNo</span>
        <button @onclick="Next" class="btn btn-dark btn-lg page"><span class="oi oi-chevron-right"></span></button>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }

    [CascadingParameter(Name = "OwnerKey")] string OwnerKey { get; set; }
    [CascadingParameter(Name = "PageSize")] int PageSize { get; set; } = 10;

    private IEnumerable<BlogItemView> blogItems { get; set; }

    public int PageNo { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        blogItems = await LoadBlogs();
    }

    private string ListingStyle(BlogItemView item)
    {
        if (string.IsNullOrEmpty(item.ImageUrl))
        {
            return string.Empty;
        }

        return $"min-height:20rem; background-image:url({item.ImageUrl}); background-size: auto 100%; background-repeat:no-repeat;";
    }

    private string AsUrl(string key)
    {
        return $"blogs/{key}";
    }

    private string AsAdminUrl(string key)
    {
        return $"admin/blogs/{key}";
    }

    private async Task Previous()
    {
        if (PageNo > 1)
            PageNo--;
        blogItems = await LoadBlogs();
        StateHasChanged();
    }

    private async Task Next()
    {
        PageNo++;
        var items = await LoadBlogs();
        if (items.Count() == 0)
        {
            PageNo--;
            return;
        }
        blogItems = items;
        StateHasChanged();
    }

    private async Task<IEnumerable<BlogItemView>> LoadBlogs()
    {
        AuthenticationState authState = await AuthStateTask;
        return await ServiceAdaptor.ReadAll(PageNo, PageSize, OwnerKey, authState?.User?.Identity?.IsAuthenticated ?? false);
    }

}
