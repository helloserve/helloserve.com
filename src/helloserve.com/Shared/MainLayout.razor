@inherits LayoutComponentBase
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using helloserve.com.Auth
@using Microsoft.JSInterop

@if (userState == null) // Retrieving the login state
{
    <text>Loading...</text>
}
else
{
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <span>@userState.IsLoggedIn</span>
            <AuthorizeView>
                <Authorized>
                    <span><img src="@userState.PictureUrl" width="32" height="32" /></span>
                    <span>&nbsp;</span>
                    <span>@userState.DisplayName</span>
                    <span>&nbsp;</span>
                    <span>
                        <button class="btn btn-info" onclick="@SignOut">Sign out</button>
                    </span>
                </Authorized>
                <NotAuthorized>
                    <span>
                        <button class="btn btn-danger" onclick="@SignIn">Sign in</button>
                    </span>
                </NotAuthorized>
            </AuthorizeView>
            <a href="https://docs.microsoft.com/en-us/aspnet/" target="_blank" class="ml-md-auto">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
}

@functions{
    [CascadingParameter] Task<AuthenticationState> authStateTask { get; set; }

    private List<TaskCompletionSource<bool>> pendingSignInFlows = new List<TaskCompletionSource<bool>>();
    UserState userState = new UserState();

    protected override async Task OnInitAsync()
    {
        var authState = await authStateTask;
        if (authState.User != null)
        {
            userState.DisplayName = authState.User.Identity.Name;
            userState.PictureUrl = authState.User.FindFirst("picture")?.Value;
            userState.IsLoggedIn = authState.User.Identity.IsAuthenticated;
        }
    }

    public async Task SignIn()
    {
        await JSRuntime.InvokeAsync<object>("openLoginPopup", DotNetObjectRef.Create(this));
    }

    public async Task SignOut()
    {
        // Transition to "loading" state synchronously, then asynchronously update
        userState = null;
        StateHasChanged();

        userState = await HttpClient.PutJsonAsync<UserState>("auth/signout", null);
        StateHasChanged();
    }

    [JSInvokable]
    public void OnSignInStateChanged(UserState newUserState)
    {
        userState = newUserState;
        StateHasChanged();

        foreach (var tcs in pendingSignInFlows)
        {
            tcs.SetResult(newUserState.IsLoggedIn);
        }
        pendingSignInFlows.Clear();
    }
}